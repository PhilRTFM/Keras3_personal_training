Aide moi Ã  organiser et optimiser ce prompt selon les specs recommandÃ©s par OpenAI met tout dans un bloc de code pour copire coller et n'oublie pas de mentionner les fichiers : 
Tu as les scripts en cours Ã  ta dispositions : 
- 'models.txt' ==> models.R
- 'analysis.txt' ==> analysis.R
- 'metrics.txt' ==> metrics.R
- 'utils.txt' ==> utils.R

- 'run_iris.txt' ==> run_iris.R
- 'run_msleep.txt' ==> run_msleep.R

Soit prÃ©cis et exhaustif dans toutes les instructions et les structures de donnÃ©es mentionnÃ©es 



DEBUT PROMPT : 


Extrait d'une part les bonnes pratiques et les contraintes techniques Ã  adopter dans le cadre de ce dÃ©veloppment de projet en R et d'autre part, les notes sur ce que l'on veut dÃ©velopper :

Tu as les scripts en cours Ã  ta dispositions : 
- 'models.txt' ==> models.R
- 'analysis.txt' ==> analysis.R
- 'metrics.txt' ==> metrics.R
- 'utils.txt' ==> utils.R

- 'run_iris.txt' ==> run_iris.R
- 'run_msleep.txt' ==> run_msleep.R


###

Pour le commentaire, il faut uniformiser les conventions,
Ici on privilÃ©gie Roxygen


Pas d'importation de paquets et d'installations directes depuis les scripts et notamment les scripts "libs"
==> L'Ã©quivalent d'un requirements.txt en python avec la liste de toutes les librairies 
(et un commentaire bref pour rappeler leur usage et leur intÃ©ret)

dans toutes les fonctions, appeler la librairie associÃ©e par la convention "pkg::fun()" 
 
Explique moi en dÃ©tail ce code : 

I/O Structures de donnÃ©es Fonctions (I/O) 
Choix des variables et leur signinfications :
==> Le @param de roxygen
1 paramÃ¨tre par ligne lorsque l'on code une fonction

Bien dÃ©finir le role de chaque paramÃ¨tre
TOUJOURS UN RETURN Ã  l'issue de chaque fonction

Pour l'instant ==> supprimer class_weight ==> On ne sait pas son utilitÃ© pour l'instant

Verbose ==> en TRUE/FALSE et Ã  toujours la fin (par convention)

Pour la PCA, je veux : 
- Faire les calculs avec FactoMineR et les graphiques avec ggplot2 full custom
- le cercle des corrÃ©lation avec les noms des variables pour la pca
- le graph des individus pour la pca

Pour la MDS, je veux : 
==> DÃ©jÃ , comprendre ce qu'est une putain de MDS xD

- Faire les calculs avec Mass, selon plusieurs modalitÃ©s de distances (Euclidenne, non euclidienne... etc) Ã  des fins de test et de recherche.
- tout les graphiques nottamement des points de coordonnÃ©es de la matrice de distance sur un scratter plot avec ggplot
- Une fonction pour MDS metrique

Bien faire attention Ã  la convention de nomenclature explicite des fonctions dans le dossier R et aux appels spÃ©cifiques dans les scripts de test sur des jeux de donnÃ©es dans inst/examples/ 
 
- Une Fonction pour une MDS non-mÃ©trique
- La publication de rÃ©fÃ©rence pour la MDS : https://bmcbioinformatics.biomedcentral.com/articles/10.1186/s12859-019-2780-y
- Schematic representation of the strategy for multidimensional scaling. a An example positive, symmetric matrix of distance values between four objects. b A dimension-reducing MDS representation of the distances in the matrix. c The stress equation for calculating the overall difference between the distances in the feature space (panel A, di,j) and the distances on the 2D plane (panel B, Di,j)
- Dimension reduction and distnet representation of differences in ex vivo drug sensitivities between hematological cancer patient samples from Majumder et al. [10]. a A standard multidimensional scaling representation of the differences in drug sensitivity between patient samples. b The distances between points in panel A compared to their actual distances in the feature space (a Shepard plot). c A static version of the distnet plot of this dataset, where the lines between points represent point pairs with a distance of 500 or less in the feature space. Circled points show inconsistencies between the feature space distances and distances on the 2D plot. For an interactive version of panel C, visit the supplemental interactive file online [15]
- Calculer et afficher le stress de Kruskal (Ã  4 Chiffres Significatifs)


Lister toutes les fonctions et dÃ©crire leur rÃ´le
Le bouton pour afficher les fonctions dans RSTUDIO.

==> L'arborescence du Git : 
Ã  bien dÃ©finir en vue du premier commit.

GÃ©nÃ©rer un doc en PDF avec Roxyen



Commit sur GitHub la premiÃ¨re version du Pipeline

==> Est-il possible de faire une seul fonction build and fit ? (notion de wrapper : Qu'est-ce qu'un Wrapper ?)


==> Pour les exports de figures : en 16:9, avec devoff et PDF, pas de PNG, et toutes les figures exportÃ©s sur diffÃ©rentes pages d'un mÃªme PDF en output
Toujours Timestamp les output norme ISO 8601 (YYYY-MM-DD)
mettre en option les Ã©llipses, faire des data points plutÃ´t petits

Factorisation modulaire du code


class_weight ==> Ã  supprimer pour le moment dans models

Structure d'un commentaire type R Oxygen : 
- Nom de la mÃ©thode
- breve description
- paramÃ¨tres et types (1 par ligne)
- ce que cela retourne


Discriminer dans la gestion de projet : 
- Script d'exploration
- Script de consoloidation
==> Retranscrire Ã§a dans les branch du projet GitHub, Ã©ventuellement


Pour l'instant, l'architecture du projet est lÃ  : 

Keras3_personal_training/
â”œâ”€ DESCRIPTION                 # MÃ©tadonnÃ©es du package (Imports, Depends, etc.)
â”œâ”€ NAMESPACE                   # GÃ©nÃ©rÃ© par roxygen2
â”œâ”€ R/
â”‚  â”œâ”€ models.R                 # Fonctions pour MLP supervisÃ© et AutoEncodeur non-supervisÃ©
â”‚  â”œâ”€ analysis.R               # PCA, MDS et visualisations avec ggplot2
â”‚  â””â”€ metrics.R                # Ã‰valuation des modÃ¨les et matrices de confusion
â”œâ”€ man/                        # Documentation Rd gÃ©nÃ©rÃ©e
â”œâ”€ inst/
â”‚  â””â”€ examples/                # Scripts dâ€™exemples d'utilisation
â”‚     â”œâ”€ run_iris.R            # Test sur le jeu de donnÃ©es iris
â”‚     â””â”€ run_msleep.R          # Test sur le jeu de donnÃ©es msleep
â”œâ”€ tests/                      # (optionnel) Tests unitaires avec testthat
â”œâ”€ README.md
â””â”€ .gitignore

Je voudrais l'ammener lÃ  : 

Keras3_personal_training/
â”œâ”€ DESCRIPTION                 # MÃ©tadonnÃ©es du package (Imports, Depends, etc.)
â”œâ”€ NAMESPACE                   # GÃ©nÃ©rÃ© par roxygen2
â”œâ”€ R/
â”‚  â”œâ”€ utils.R                  # Fonctions pour preprocessing les jeux donnÃ©es et fonctions de sauvegarde des plots
â”‚  â”œâ”€ models.R                 # Fonctions pour MLP supervisÃ© et AutoEncodeur non-supervisÃ©
â”‚  â”œâ”€ analysis.R               # PCA, MDS et visualisations avec ggplot2
â”‚  â””â”€ metrics.R                # Ã‰valuation des modÃ¨les et matrices de confusion
â”œâ”€ man/                        # Documentation Rd gÃ©nÃ©rÃ©e
â”œâ”€ inst/
â”‚  â””â”€ examples/                # Scripts dâ€™exemples d'utilisation
â”‚     â”œâ”€ run_iris.R            # Test sur le jeu de donnÃ©es iris
â”‚     â””â”€ run_msleep.R          # Test sur le jeu de donnÃ©es msleep
â”œâ”€ README.md
â””â”€ .gitignore


==> Pour Test sur le jeu de donnÃ©es iris : 
- Faire une ACP et une MDS sur iris
- Faire tourner un modÃ¨le suppervisÃ© (mlp) et plot la matrice de confusion avec le tableau des mÃ©triques
- Faire tourner l'auto-encodeur et pour le tester : 
	ðŸ”¹ MÃ©triques dâ€™Ã©valuation (numÃ©riques + labels)
	-MSE / RMSE â†’ mesure la fidÃ©litÃ© globale de reconstruction.
	- MAE â†’ plus robuste aux valeurs extrÃªmes.
	- AUC-ROC / AUC-PR â†’ si lâ€™objectif est la dÃ©tection dâ€™anomalies via reconstruction.
	ðŸ”¹ Graphiques utiles
	- Courbe dâ€™apprentissage (train/val loss) â†’ suivre convergence et surapprentissage.
	- Distribution des erreurs de reconstruction (histogramme/densitÃ©) â†’ sÃ©parer normales vs anomalies.
	- Scatter plot X vs X' (ou erreur vs label) â†’ visualiser la qualitÃ© de reconstruction par classe.
- Pour chacun des deux modÃ¨les, on veux aussi les history plot epoch sur Accuracy et epoch sur Loss

- Exporter tout les graphs et rÃ©sulats dans le PDF de sortie : 
Exemple de mÃ©thodologie :

``` 
# Ouvrir un pÃ©riphÃ©rique PDF
pdf("mes_plots.pdf")

# GÃ©nÃ©rer quelques graphiques
plot(1:10, main = "Premier plot")
hist(rnorm(100), main = "DeuxiÃ¨me plot")

# Fermer le pÃ©riphÃ©rique PDF
dev.off()
```



## Structure du jeu de donnÃ©es msleep :
Voici sa structure :

ðŸ”¹ Description gÃ©nÃ©rale
Nombre dâ€™observations : 83 mammifÃ¨res
Nombre de variables : 11 colonnes
ThÃ¨me : habitudes de sommeil, caractÃ©ristiques biologiques et taxonomiques
ðŸ”¹ Variables
name (string) â€“ nom commun de lâ€™animal
genus (string) â€“ genre taxonomique
vore (string, catÃ©gorielle) â€“ type alimentaire : carnivore, herbivore, omnivore, insectivore (souvent abrÃ©gÃ© : carni, herbi, omni, inse)
order (string) â€“ ordre taxonomique
conservation (string) â€“ statut de conservation (ex. lc = least concern, vu = vulnerable, etc.)
sleep_total (numÃ©rique) â€“ nombre total dâ€™heures de sommeil par jour
sleep_rem (numÃ©rique) â€“ nombre dâ€™heures de sommeil paradoxal (REM) par jour
sleep_cycle (numÃ©rique) â€“ durÃ©e moyenne dâ€™un cycle de sommeil (en heures)
awake (numÃ©rique) â€“ nombre dâ€™heures Ã©veillÃ© par jour (= 24 - sleep_total)
brainwt (numÃ©rique) â€“ poids du cerveau (en kg)
bodywt (numÃ©rique) â€“ poids du corps (en kg)

==> Pour le Test sur le jeu de donnÃ©es msleep
- Pour le preprocessing on veut d'abord sÃ©parer les variables catÃ©gorielles des variables numÃ©riques : 
- Pour les variables numÃ©riques : 
 ==> Cliff's delta  + visualisation
- Pour les variables catÃ©gorielles : 
 ==> Correlation matrix, Test du XÂ² ou Fisher


FIN PROMPT

